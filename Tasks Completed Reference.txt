### Task 1
Create a new type, ReportingStructure, that has two properties: employee and numberOfReports.

For the field "numberOfReports", this should equal the total number of reports under a given employee. The number of 
reports is determined to be the number of directReports for an employee and all of their distinct reports. For example, 
given the following employee structure:
```
                    John Lennon
                /               \
         Paul McCartney         Ringo Starr
                               /        \
                          Pete Best     George Harrison
```
The numberOfReports for employee John Lennon (employeeId: 16a596ae-edd3-4847-99fe-c4518e82c86f) would be equal to 4. 

This new type should have a new REST endpoint created for it. This new endpoint should accept an employeeId and return 
the fully filled out ReportingStructure for the specified employeeId. The values should be computed on the fly and will 
not be persisted.

Solution: New type created:ReportingStructure
          New REST endpoint created :
          * HTTP Method: GET
    	  * URL: localhost:8080/employeeReports/{id}
          * RESPONSE: ReportingStructure

### Task 2
Create a new type, Compensation. A Compensation has the following fields: employee, salary, and effectiveDate. Create 
two new Compensation REST endpoints. One to create and one to read by employeeId. These should persist and query the 
Compensation from the persistence layer.


Solution: New type created:Compensation

	  New REST endpoint created :
    	  * HTTP Method: POST 
    	  * URL: localhost:8080/compensation
     	  * PAYLOAD: Compensation
    	  * RESPONSE: Compensation
	
  	  New REST endpoint created :
    	  * HTTP Method: GET
    	  * URL: localhost:8080/compensation/{id}
    	  * RESPONSE: Compensation		

	